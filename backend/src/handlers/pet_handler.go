package handlers

import (
	"bityagi/logger"
	"bityagi/service"
	openapi "build/code/spec/src"
	"context"
	"go.uber.org/zap"
	"net/http"
)

// MyPetApiService PetApiServicer is autogenerated code found in the build directory
// Declares a new type, MyPersonApiService, which is a struct with no fields.
// It will be used to implement the openapi.PersonAPIServicer interface.
type MyPetApiService struct{}

// NewMyPetApiService This is a constructor function for MyPersonApiService.
// It returns a new instance of MyPersonApiService, but the return type is openapi.PersonAPIServicer, which is an interface type.
// This means the function promises to return something that satisfies the PersonAPIServicer interface, which in this case is a *MyPersonApiService.
func NewMyPetApiService() openapi.PetsAPIServicer {
	return &MyPetApiService{}
}

// CreatePets is a method on MyPersonApiService that satisfies the PersonAPIServicer interface.
func (m MyPetApiService) CreatePets(ctx context.Context) (openapi.ImplResponse, error) {
	//TODO implement me
	panic("implement me")
}

// ListPets is a method on MyPersonApiService that satisfies the PersonAPIServicer interface.
func (m MyPetApiService) ListPets(ctx context.Context, i int32) (openapi.ImplResponse, error) {
	//TODO implement me
	panic("implement me")
}

// ShowPetById is a method on MyPersonApiService that satisfies the PersonAPIServicer interface.
func (m MyPetApiService) ShowPetById(ctx context.Context, id int64) (openapi.ImplResponse, error) {

	pet := service.GetPetByID(id)
	logger.Logger.Info("Person value is called", zap.String("pet", pet.Name))

	return openapi.Response(http.StatusOK, pet), nil
}
